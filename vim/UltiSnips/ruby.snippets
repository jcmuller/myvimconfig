snippet debug "insert pry"
	require 'pry'; binding.pry

snippet pry "insert pry"
	require 'pry'; binding.pry

snippet Enum "Enum"
	include Enumerable

	def each(&block)
		$0
	end

snippet Comp "Comp"
	include Comparable

	def <=>(other)
		$0
	end

snippet Forw- "Forw-"
	extend Forwardable

snippet defs "defs"
	def self.${1:class_method_name}
		$0
	end

snippet defmm "def method_missing"
	def method_missing(method_name, *args, &block)
		$0
	end

	def respond_to_missing?(method_name, *args)
		$1
	end

snippet method_missing "def method_missing"
	def method_missing(method_name, *args, &block)
		$0
	end

	def respond_to_missing?(method_name, *args)
		$1
	end

snippet am "am"
	alias_method :${1:new_name}, :${2:old_name}

snippet array "array.new"
	Array.new(${1:10}) { |${2:i}| ${3} }

snippet hash "hash.new"
	Hash.new { |h, k| h[k] = ${1} }

snippet file "File.foreach() { |line| .. }"
	File.foreach(${1:"path/to/file"}) { |${2:line}| ${3} }

snippet file "File.read()"
	File.read(${1:"path/to/file"})$0

snippet Dir "Dir.global() { |file| .. }"
	Dir.glob(${1:"dir/glob/*"}) { |${2:file}| ${3} }

snippet Dir "Dir['..']"
	Dir[${1:"glob/**/*.rb"}]$0

snippet dir "File.dirname"
	File.dirname(__FILE__)

snippet deli "delete_if"
	delete_if { |${1:e}| ${2} }

snippet fil "fill"
	fill(${1:range}) { |${2:i}| ${3} }

snippet flao "flao"
	inject(Array.new) { |${1:arr}, ${2:a}| $1.push(*$2)}$0

snippet zip "zip"
	zip(${1:enums}) { |${2:row}| ${3} }

snippet dow "dow"
	downto(${1:0}) { |${2:n}| ${3} }

snippet ste "ste"
	step(${1:2}) { |${2:n}| ${3} }

snippet tim "tim"
	times { |${1:n}| ${2} }

snippet upt "upt"
	upto(${1:1.0/0.0}) { |${2:n}| ${3} }

snippet loo "loo"
	loop { ${1} }

snippet ea "ea"
	each { |${1:e}| ${2} }

snippet inj "inj"
	inject(${1:init}) { |a, i| ${4} }

snippet map "map"
	map { |${1:e}| ${2} }

snippet sor "sor"
	sort { |a, b| ${1} }
