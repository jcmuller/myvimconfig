" Juan C. Muller's .vimrc
" {{{ Basics
" Turn off compatibility with VI.
set nocompatible
" }}}
" {{{ Plugins
" {{{ Setup
" Use vim-plug to easily modify the runtime path to include all
" plugins under the ~/.vim/plugged directory
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
				\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall | source ~/.vim/vimrc
endif
" }}}
" {{{ Plugins
source ~/.vim/include/plug.vim
" }}}
" }}}
" {{{ Indent and spacing
" All nice indent options
set autoindent
set cindent
set cinkeys-=0# " don't force # indentation
set copyindent	"copy the previous indentation on autoindenting
set expandtab
"set noexpandtab
set shiftround "Round indent to multiple of 'shiftwidth'
set shiftwidth=2 "Number of spaces to use for each step of (auto)indent
set smartindent
set smarttab "use shiftwidth
set softtabstop=2 "Number of spaces that a <Tab> counts for while editing
set tabstop=2 "Number of spaces that a <Tab> in the file counts for
" }}}
" {{{ Search
set hlsearch "highlight search term
set incsearch "search as you type
set nowrapscan "Only search forward in buffer.

"if executable('rg')
set grepprg=rg\ --vimgrep\ --no-heading
set grepformat=%f:%l:%c:%m
"endif
" }}}
" {{{ Global settings
" set autoread     "refresh file automatically if changed
set background=light
"set background=dark
set backup "do create backup files
set backspace=indent,eol,start "allow backspace to work across inserts and newlines.
set backupdir=~/.vim/backups
set bufhidden=unload
"set cmdheight=2 "Number of screen lines to use for the command line
set encoding=utf-8
set termencoding=utf-8
set fileformats=unix,dos,mac
set history=1000
"set iskeyword+=_,$,@,%,#                        "not word dividers
set laststatus=2 "don't combine status line with command line
set mouse=a "n "a all modes, n normal mode, v visual mode
set noautowrite "Don't write the contents of the file, if it has been modified, on each
set nolinebreak "don't break line after n characters (usually 70 unless otherwise spec'd)
set noshowmode
set number "show line numbers
set splitbelow "open help, et al, horizontally below, rather than vertically to the right
set splitright
set switchbuf=useopen,usetab "control behavior when switching buffers.
set tagbsearch "Binary tag search
"set term=xterm
set textwidth=95
set colorcolumn=80,95,120
set wrapmargin=0
set nowrap
set diffopt=context:3,iwhite,filler "diff options
" }}}
" {{{ Mapleader
let mapleader = ","
" }}}
" {{{ Match
set matchpairs+=<:>
set showmatch "highlight matching parenthesis, brace, bracket, etc.
set titlestring=%t\ (%f)
set title " Set window title
" }}}
" {{{ Syntax
" Check for version
if v:version >= 600
	syntax enable
	filetype on
	filetype indent on
	filetype plugin on
	filetype plugin indent on
endif
" "}}}
" {{{ List and tabline
if v:version >= 700
	set list
	set listchars=tab:\|\ ,trail:•,extends:>,precedes:<,nbsp:@
	set showtabline=2 "always show tab line.
endif
" }}}
" {{{ GPG
if v:version >= 700
	let g:GPGPreferArmor = 1
	let g:GPGPreferSigned = 1
	let g:GPGDefaultRecipients = [$USER]
endif
" }}}
" {{{ Persistent undo
if has('persistent_undo')
	set undofile
	set undodir=~/.vim/var/undo
endif
" }}}
" {{{ Spell
if has('spell')
	set spell spelllang=en_us "spell checking enabled

	autocmd FileType gitconfig set nospell
	autocmd FileType man set nospell
	autocmd FileType netrw set nospell
	" autocmd FileType taglist set nospell
	autocmd FileType crontab set nospell
	autocmd FileType gitcommit set nolist
endif
" }}}
" {{{ Scroll
" Minimal number of screen lines to keep above and below the cursor.
set scrolloff=2

set sidescrolloff=5
set sidescroll=15
" }}}
" {{{ Hidden
" One of the most important options to activate. Allows you to switch from an
" unsaved buffer without saving it first. Also allows you to keep an undo
" history for multiple files. Vim will complain if you try to quit without
" saving, and swap files will keep you safe if your computer crashes.
set hidden
" }}}
" {{{ Wildmenu
" Better command-line completion
set wildmenu
set wildignore=*.swp,*.bak,*~,*.pyc,*.class,.git/,build/**
" }}}
" {{{ Showcmd
" Show partial commands in the last line of the screen
set showcmd
" }}}
" {{{ Windows
set noequalalways
set winwidth=10
set winminwidth=10
" }}}
" {{{ Case in search
" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase
" }}}
" {{{ Confirm
" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm
" }}}
" {{{ Visual bell
" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell.  If visualbell is set, and
" this line is also included, vim will neither flash nor beep.  If visualbell
" is unset, this does nothing.
set t_vb=
" }}}
" {{{ Time outs
" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200
" }}}
" {{{ Man pages
source $VIMRUNTIME/ftplugin/man.vim
" }}}
" {{{ NeoVim vs Vim
if has('nvim')
	source ~/.vim/include/nvim.vim
else
	source ~/.vim/include/vim.vim
endif
" }}}
" Linux vs Darwin {{{ 
if has("mac")
	source ~/.vim/include/darwin.vim
else
	source ~/.vim/include/linux.vim
endif
" }}}
" {{{ autocmds
"autocmd BufDelete,BufWritePost .vimrc source ~/.vimrc
"autocmd BufDelete .vimrc source ~/.vimrc
augroup arduino " {{{
	autocmd!
	autocmd BufRead,BufNewFile *.ino setlocal ft=arduino
	autocmd BufRead,BufNewFile *.pde setlocal ft=arduino
augroup END "}}}
augroup alacritty " {{{
       autocmd!
       autocmd BufRead,BufNewFile ~/.config/alacritty/* setlocal ft=yaml
augroup END " }}}
augroup i3 " {{{
	autocmd!
	autocmd BufRead,BufNewFile ~/.config/regolith2/i3/config.d/* setlocal ft=i3
	autocmd BufRead,BufNewFile ~/.config/i3/config.d/* setlocal ft=i3
	autocmd BufRead,BufNewFile ~/.config/sway/config.d/* setlocal ft=i3
	autocmd BufRead,BufNewFile ~/.config/sway/config setlocal ft=i3
	autocmd BufRead,BufNewFile /usr/share/regolith/i3/config.d/* setlocal ft=i3
augroup END " }}}
augroup tmux " {{{
	autocmd!
	autocmd BufRead,BufNewFile *.tmux setlocal ft=tmux
augroup END" }}}
autocmd BufRead,BufWinEnter *.hbs set ft=handlebars
autocmd BufRead,BufWinEnter *.jelly setlocal ft=xml
augroup markdown " {{{
	autocmd!
	autocmd BufRead,BufWinEnter Glossary.md setlocal foldmethod=expr foldexpr=getline(v:lnum)=~'^#'?'>1':0&&getline(v:lnum+1)=~'^#'?'<1':1
	autocmd BufRead,BufNewFile *.md setlocal filetype=markdown
	autocmd FileType markdown setlocal formatoptions+=w tw=72
augroup END" }}}
augroup latex " {{{
	autocmd!
	autocmd BufRead *.tex setl filetype=tex
	autocmd BufWritePost *tex make
	autocmd FileType tex setl makeprg=pdflatex\ %
augroup END" }}}
"autocmd BufWritePre * :call <SID>StripTrailingWhitespace()
"autocmd BufWritePre * :silent call StripTrailingWhitespace()
autocmd FileType c,cpp,objc setl nolist noet sw=4 ts=4
autocmd FileType crontab setl nobackup nowritebackup
augroup graphviz " {{{
	autocmd!
	autocmd BufWritePost *.dot make
	autocmd FileType dot setl makeprg=make noet sw=4 ts=4

	autocmd BufWritePost *.msc make
	autocmd FileType msc setl makeprg=make noet sw=4 ts=4
augroup END" }}}
augroup plantuml " {{{
	autocmd!
	autocmd BufWritePost *.pu make
	autocmd FileType plantuml setl makeprg=make noet sw=4 ts=4
augroup END" }}}
autocmd FileType java setlocal omnifunc=javacomplete#Complete completefunc=javacomplete#CompleteParamsInfo et sw=4 ts=4
autocmd FileType magit setl nobackup nowritebackup noswapfile
autocmd FileType man setl nobackup nowritebackup noswapfile
autocmd Filetype make setl noet
augroup perl " {{{
	autocmd!
	autocmd FileType perl,javascript,json,ruby inoremap <buffer> {<CR> {<CR>}<Esc>O
	autocmd FileType perl,javascript,json,ruby vnoremap <buffer> {<CR> s{<CR>}<Esc>kp=iB
	autocmd FileType perl setl makeprg=perl\ -c\ % noet sw=4 ts=4
augroup END " }}}
autocmd FileType vo_base setl nolist
augroup yamllint " {{{ 
	autocmd!
	autocmd BufRead .yamllint set ft=yaml
" }}}
augroup IOS " {{{
	autocmd!
	autocmd BufRead,BufNewFile,BufWinEnter apple-app-site-association setlocal ft=json
augroup END " }}}
" Remove any trailing white space on save

augroup ruby " {{{
	autocmd!
	" Set makeprg accordingly to the ruby file being edited
	autocmd FileType ruby
				\ if expand('%') =~# '_test\.rb$' |
				\   compiler rubyunit | setl makeprg=bundle\ exec\ testrb\ \"%:p\" |
				\ elseif expand('%') =~# '\.feature' |
				\   compiler cucumber | setl makeprg=bundle\ exec\ cucumber\ \"%:p\" |
				\ elseif expand('%') =~# '_spec\.rb$' |
				\   compiler rspec | setl makeprg=bundle\ exec\ rspec\ \"%:p\" |
				\ else |
				\   compiler ruby | setl makeprg=ruby\ -wc\ \"%:p\" |
				\ endif

	autocmd BufWinEnter *.feature setl makeprg=bundle\ exec\ cucumber\ \"%:p\"
augroup END "}}}
augroup kubeconfig "{{{
	autocmd!
	autocmd BufRead ~/.kube/config setl ft=yaml nowrap
augroup END"}}}
augroup neomutt " {{{
	" Add format option 'w' to add trailing white space, indicating that paragraph
	" continues on next line. This is to be used with mutt's 'text_flowed' option.
	autocmd!
	autocmd BufNewFile,BufRead neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\} setfiletype mail
	autocmd FileType mail setlocal formatoptions+=w tw=72
augroup END " }}}
augroup dajoku "{{{
	autocmd!
	autocmd BufNewFile,BufRead .dajoku,.release-pipeline setfiletype yaml
augroup END
"}}}
augroup Global " {{{
	autocmd!
	"Create directory if it doesn't exist
	autocmd BufWritePre *
				\ if '<afile>' !~ '^scp:' && !isdirectory(expand('<afile>:h')) |
				\ call mkdir(expand('<afile>:h'), 'p') |
				\ endif

	"Format
	" this is defined also in the cocvim augroup
	"autocmd BufWritePost * call CocAction('format')

	autocmd BufReadPost *
				\ if expand("<afile>:p:h") !=? $TEMP |
				\   if line("'\"") > 0 && line("'\"") <= line("$") |
				\     exe "normal g`\"" |
				\     let b:doopenfold = 1 |
				\   endif |
				\ endif

	" Need to postpone using "zv" until after reading the modelines.
	autocmd BufWinEnter *
				\ if exists("b:doopenfold") |
				\   unlet b:doopenfold |
				\   exe "normal zv" |
				\ endif
augroup END
" }}}
" }}}
" {{{ Mappings
" Quickly edit/source .vimrc
noremap <leader>ve :edit $HOME/.vimrc<CR>
noremap <leader>vs :source $HOME/.vimrc<CR>

" Yank(copy) to system clipboard
noremap <leader>y "+y

" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
" nnoremap <C-L> :nohl<CR><C-L>
nnoremap <space>l :nohl<cr>:redraw!<cr>

" Search visually selected text
vmap * :<C-u>call <SID>VSetSearch()<CR>/<CR>
vmap # :<C-u>call <SID>VSetSearch()<CR>?<CR>

nnoremap q; q:

" Search
noremap ;; :%s:::g<Left><Left><Left>
noremap ;' :%s:::gc<Left><Left><Left><Left>

" Select previously pasted text
nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

noremap! <C-A> <Home>
noremap! <C-E> <End>
cnoremap <C-K> <C-U>
"noremap! <C-F> <Right>
noremap! <C-B> <Left>

inoremap {<cr> {<cr>}<ESC>O

" Saving quicker
" Normal mode
nnoremap ;w :w<cr>
nnoremap ;s :w<cr>
" Insert mode: Ctrl-S
inoremap <C-S> <Esc>:w<cr>a

" Remove trailing white space, dup empty lines, etc
nnoremap <Leader>w :call StripTrailingWhitespace()<cr>

" Find merge diffs
"nnoremap <Leader>fd /[<=>]\{3\}<cr>

" Toggle theme
nnoremap <F5> :call ToggleTheme()<cr>

"}}}
"{{{ Commands
command! Scratch call ScratchBuffer()
command! MakeScratch call MakeScratchBuffer()
command! CDC cd %:p:h
command! CDCLocal lcd %:p:h

nnoremap <leader>cd :CDC<cr>:pwd<cr>
nnoremap <leader>lcd :CDCLocal<cr>:pwd<cr>
"}}}
" {{{ Custom Functions
func! StripTrailingWhitespace()
	let l = line(".")
	let c = col(".")
	%s/\s\+$//e       " Remove trailing white space
	%s/\n\{3,}/\r\r/e " Condense multiple empty lines into one
	v/\_s*\S/d        " Only one \n at EOF    http://stackoverflow.com/posts/7501902/revisions
	call cursor(l, c)
endf

func! s:VSetSearch()
	let temp = @@
	norm! gvy
	let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
	let @@ = temp
endf

func! ShowTab()
	let TabLevel = (indent('.') / &ts )
	if TabLevel == 0
		let TabLevel='*'
	endif
	return TabLevel
endf

func! ToggleTheme()
	if g:colors_name == "Tomorrow"
		:colo Tomorrow-Night
	elseif g:colors_name == "Tomorrow-Night"
		:colo Tomorrow
	endi
endf

func! ScratchBuffer()
	new
	call MakeScratchBuffer()
endf

func! MakeScratchBuffer()
	setl buftype=nofile
	setl bufhidden=hide
	setl noswapfile
endf
" }}}
" {{{ Plugin configuration
" {{{ Airline
let g:airline_theme = "tomorrow"

let g:airline_mode_map = {
			\ '__' : '-',
			\ 'n'  : 'N',
			\ 'i'  : 'I',
			\ 'R'  : 'R',
			\ 'c'  : 'C',
			\ 'v'  : 'V',
			\ 'V'  : 'V',
			\ '' : 'V',
			\ 's'  : 'S',
			\ 'S'  : 'S',
			\ '' : 'S',
			\ 'h'  : 'H'
			\ }

let g:airline_powerline_fonts = 1
let g:airline_detect_spell = 0
"let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#neomake#enabled = 1
let g:airline_extensions = []
" }}}
" {{{ Block Toggle (blockle)
let g:blockle_mapping = '<Leader>L'
" }}}
" {{{ Closetag
autocmd FileType html,eruby let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,eruby,eelixir source ~/.vim/plugged/closetag.vim/plugin/closetag.vim
" }}}
" {{{ CTRLP
"noremap <Leader>P :CtrlPLine<cr>
"let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux"
" Extensions
let g:ctrlp_extensions = ['tag', 'line', 'buffertag', 'changes', 'quickfix', 'undo']
let g:ctrlp_buftag_ctags_bin = '/usr/bin/ctags'

let g:ctrlp_match_window = "bottom,order:ttb,min:1,max:30"
let g:ctrlp_show_hidden = 1

let g:ctrlp_switch_buffer = 'e'
let g:ctrlp_max_depth = 40
let g:ctrlp_max_files = 0
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|npm\|vendor'
" }}}
" {{{ Fugitive
nnoremap <leader>ga  :Git add -p<cr>
nnoremap <leader>gb  :Git blame<cr>
nnoremap <leader>gc  :Git commit -v<cr>
nnoremap <leader>gd  :Git diff<cr>
nnoremap <leader>gl  :Git log<cr>
nnoremap <leader>gm  :Gmove<space>
nnoremap <leader>gpu :Git push<CR>
nnoremap <leader>gpr :Git pull --rebase<CR>
nnoremap <leader>gr  :GDelete<CR>
nnoremap <leader>gs  :Git<CR>
" :Gshow shows what files a commit changes
command! -nargs=? -bar Gshow call setqflist(map(systemlist("git show --pretty='' --name-only <args>"), '{"filename": v:val, "lnum": 1}'))
" :Gdifffiles shows the files changes since SHA
command! -nargs=? -bar Gdifffiles call setqflist(map(systemlist("git diff --pretty='' --name-only <args>"), '{"filename": v:val, "lnum": 1}'))
" }}}
" {{{ GitGutter
let g:gitgutter_on_bufenter = 1
let g:gitgutter_all_on_focusgained = 0
let g:gitgutter_highlight_lines = 0
" }}}
" {{{ Gundo
nnoremap <F6> :GundoToggle<CR>
" }}}
" {{{  localvimrc
let g:localvimrc_sandbox = 0
let g:localvimrc_ask = 0
let g:localvimrc_blacklist = $HOME . "/Development/OSS/.*"
"let g:localvimrc_debug = 1
" }}}
" {{{ NERDTree
nnoremap <space><space> :NERDTreeToggle<cr>
nnoremap <space>f :NERDTreeFind<cr>
nnoremap <space>F :NERDTreeFocus<cr>
" Don't show temp files, swap files
let NERDTreeIgnore = ['\~$', '\..*\.sw\w$']
let g:NERDTreeDirArrowCollapsible = "-"
let g:NERDTreeDirArrowExpandable = ""
"let NERDTreeMinimalUI = 1
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeShowHidden = 1
" Open NERDtree when no file was specified
" autocmd vimenter * if !argc() | NERDTree | endif  " This also opens when -t TAG :/
let g:NERDTreeGitStatusIndicatorMapCustom = {
			\ "Modified"  : "*",
			\ "Staged"    : "+",
			\ "Untracked" : "?",
			\ "Renamed"   : "~",
			\ "Unmerged"  : "═",
			\ "Deleted"   : "d",
			\ "Dirty"     : "Y",
			\ "Clean"     : "✔︎",
			\ 'Ignored'   : '☒',
			\ "Unknown"   : "?"
			\ }
" }}}
" {{{ Perl stuff
let perl_include_pod = 1
let perl_extended_vars = 1
let perl_want_scope_in_variables = 1
"let perl_fold = 1
"let perl_fold_blocks = 1
" }}}
" {{{ Tagbar
" Tagbar mappings
map <F2> :TagbarToggle<CR>
let g:tagbar_autoclose = 0
let g:tagbar_autofocus = 1
" let g:tagbar_iconchars = ['▶', '▼']  "(default on Linux and Mac OS X)
let g:tagbar_iconchars = ['▸', '▾']
" let g:tagbar_iconchars = ['▷', '◢']
" let g:tagbar_iconchars = ['+', '-']  "(default on Windows)
" }}}
" {{{ tmux-navigator
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>
" }}}
" {{{ tslime
vmap <C-c><C-c> <Plug>SendSelectionToTmux
nmap <C-c><C-c> <Plug>NormalModeSendToTmux
nmap <C-c>r <Plug>SetTmuxVars
" }}}
" {{{ turbux

func! TurbuxRunWithNeoTerm(command)
	:execute ":T" a:command
endf

let g:no_turbux_mappings = 1
map <Leader>T <Plug>SendFocusedTestToTmux

let g:turbux_custom_runner = 'TurbuxRunWithNeoTerm'
let g:turbux_command_prefix = 'ze' " default: (empty)
" }}}
" {{{ Ultisnips config
let g:UltiSnipsExpandTrigger='<C-j>'
let g:UltiSnipsSnippetDirectories=['~/.vim/my-snippets','~/.vim/plugged/neosnippet-snippets/neosnippets']
" }}}
" {{{ vim-notes
let g:notes_directories = ['~/Documents/Notes']
let g:notes_suffix = '.txt'
let g:notes_smart_quotes = 0
" }}}
" {{{ Color settings
set t_Co=256
colo Tomorrow-Night
" }}}
" {{{ Pick.vim
nnoremap <Leader>e :call PickFile()<cr>
" }}}
" {{{ vim-test
let test#strategy = "neoterm"
" }}}
" {{{ Grepper
nnoremap <Leader>G :Grepper -tool git<cr>
nmap gs <Plug>(GrepperOperator)
xmap gs <Plug>(GrepperOperator)

let g:grepper = {}
let g:grepper.tools = ['git', 'rg']
let g:grepper.jump = 1
let g:grepper.next_tool = '<Leader>g'
" }}}
" DoToo {{{
autocmd BufRead,BufNewFile *.org setlocal ft=dotoo
let g:dotoo#capture#refile = '~/org/work.org'
let g:dotoo#capture#clock = 0
" }}}
" Gtd {{{
let g:gtd#dir = '~/Nextcloud/gtd/'
"let g:gtd#default_context = 'work'
let g:gtd#default_action = 'inbox'
let g:gtd#folding = 1
let g:gtd#map_refresh = 'r'
let g:gtd#review = [
			\ '!working',
			\ '!next',
			\ '(!inbox + !scheduled-'.strftime("%Y%m%d").')',
			\ '!todo',
			\ '!waiting',
			\ ]
nmap <Leader>Ge <Plug>GtdExplore
nmap <Leader>Gn <Plug>GtdNew
vmap <Leader>Gn <Plug>GtdNew
nmap <Leader>Gd <Plug>GtdDisplay
"nmap <Leader>Gr :Gtd (!inbox + !scheduled-<C-R>=strftime("%Y%m%d")<CR>)<CR>
nmap <Leader>Gr :GtdReview<CR>
nmap <Leader>Gt :Gtd !todo<CR>
nmap <Leader>Gw :Gtd !waiting<CR>
nmap <Leader>GD :Gtd !done<CR>
nmap <Leader>Gs :Gtd !scheduled<CR>
nmap <Leader>Gf :GtdFiles<CR>
" }}}
" {{{ vimagit
let g:magit_default_fold_level=2
let g:magit_discard_untracked_do_delete=1
" }}}
" {{{ vim-go
let g:go_fmt_command = "goimports"
let g:go_fmt_fail_silently = 0
let g:go_rename_command = 'gopls'
" }}}
" {{{ Colorizer
let g:colorizer_auto_filetype = 'html,css,i3,config'
" }}}
" {{{ vim-jsx
let g:jsx_ext_required = 0
let g:jsx_pragma_required = 0
let g:xml_syntax_folding = 0
" }}}
" FZF {{{
" Default fzf layout
" - down / up / left / right
nnoremap <silent> <Leader>pb :FzfPreviewBuffersRpc<CR>
nnoremap <silent> <Leader>pP :FzfPreviewGitStatusRpc<cr>
nnoremap <silent> <Leader>pm :FzfPreviewMruFilesRpc<CR>
nnoremap <silent> <Leader>pl :FzfPreviewLinesRpc<cr>
nnoremap <silent> <Leader>pp :FzfPreviewProjectFilesRpc<cr>
nnoremap <silent> <Leader>pt :FzfPreviewCtagsRpc<CR>
nnoremap <silent> <Leader>pg :FzfPreviewProjectGrepRpc<space>
" }}}
" fzf-quickfix {{{
nmap <Leader>q <Plug>(fzf-quickfix)
" }}}
" echodoc {{{
let g:echodoc_enable_at_startup = 1
let g:echodoc#type = 'floating'
" }}}
" Gutentags {{{
let g:gutentags_exclude_project_root = ['/usr/local', '.tox']
" }}}
" Pencil {{{
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd call pencil#init()
  autocmd FileType text call pencil#init()
  "autocmd FileType mail call pencil#init()
augroup END
" }}}
" Lexical {{{
let g:lexical#thesaurus = ['~/.vim/thesaurus/mthesaur.txt',]

augroup lexical
	autocmd!
	autocmd FileType markdown,mkd call lexical#init()
	autocmd FileType textile call lexical#init()
	autocmd FileType text call lexical#init({ 'spell': 0 })
augroup END
" }}}
" fzf-preview {{{
let g:fzf_preview_command = 'bat --color=always --style=grid {-1}'
let g:fzf_preview_lines_command = 'bat --color=always --style=grid --plain'
" }}}
augroup markdownlint " {{{
	autocmd!
	autocmd BufRead,BufNewFile .markdownlintrc setlocal ft=json
augroup END "}}}
augroup terraform " {{{
	autocmd!
	autocmd BufRead,BufNewFile *.tf setlocal ft=terraform
augroup END "}}}
augroup gopass " {{{
	autocmd!
	autocmd BufRead,BufNewFile /dev/shm/gopass-edit*/secret setlocal ft=yaml nospell
augroup END "}}}
augroup golang " {{{
	autocmd!
	autocmd BufRead *.go,go.mod setlocal shiftwidth=4 tabstop=4 nospell
	autocmd BufRead go.mod setlocal filetype=gomod
augroup END " }}}
augroup gotemplates " {{{
	autocmd!
	autocmd BufRead,BufNewFile *.tmpl,*.gohtml setlocal ft=gotexttmpl
augroup END " }}}
" }}}
source ~/.vim/include/abbr.vim

let g:go_version_warning=0

command! ReplaceErrorsWrap :%s/errors.Wrapf\?(\([^,]\+\), \("[^"]\+\)\([^)]\+\))/fmt.Errorf(\2: %w\3, \1)/gc

" vim:tw=0:ts=4:sw=4:noet:nolist:foldmethod=marker
